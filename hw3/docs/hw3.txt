-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/Stepavly/hw3#readme</a>
@package hw3
@version 0.1.0.0

module HW3.Base

-- | Function names (e.g. div, sort, length, ...)
data HiFun
HiFunDiv :: HiFun
HiFunMul :: HiFun
HiFunAdd :: HiFun
HiFunSub :: HiFun
HiFunNot :: HiFun
HiFunAnd :: HiFun
HiFunOr :: HiFun
HiFunLessThan :: HiFun
HiFunGreaterThan :: HiFun
HiFunEquals :: HiFun
HiFunNotLessThan :: HiFun
HiFunNotGreaterThan :: HiFun
HiFunNotEquals :: HiFun
HiFunIf :: HiFun
HiFunLength :: HiFun
HiFunToUpper :: HiFun
HiFunToLower :: HiFun
HiFunReverse :: HiFun
HiFunTrim :: HiFun
HiFunList :: HiFun
HiFunRange :: HiFun
HiFunFold :: HiFun
HiFunPackBytes :: HiFun
HiFunUnpackBytes :: HiFun
HiFunEncodeUtf8 :: HiFun
HiFunDecodeUtf8 :: HiFun
HiFunZip :: HiFun
HiFunUnzip :: HiFun
HiFunSerialise :: HiFun
HiFunDeserialise :: HiFun
HiFunRead :: HiFun
HiFunWrite :: HiFun
HiFunMkDir :: HiFun
HiFunChDir :: HiFun
HiFunParseTime :: HiFun
HiFunRand :: HiFun
HiFunEcho :: HiFun
HiFunCount :: HiFun
HiFunKeys :: HiFun
HiFunValues :: HiFun
HiFunInvert :: HiFun

-- | Values (numbers, booleans, strings, ...)
data HiValue
HiValueBool :: Bool -> HiValue
HiValueFunction :: HiFun -> HiValue
HiValueNumber :: Rational -> HiValue
HiValueNull :: HiValue
HiValueString :: Text -> HiValue
HiValueList :: Seq HiValue -> HiValue
HiValueBytes :: ByteString -> HiValue
HiValueAction :: HiAction -> HiValue
HiValueTime :: UTCTime -> HiValue
HiValueDict :: Map HiValue HiValue -> HiValue

-- | Expressions (literals, function calls, ...)
data HiExpr
HiExprValue :: HiValue -> HiExpr
HiExprApply :: HiExpr -> [HiExpr] -> HiExpr
HiExprRun :: HiExpr -> HiExpr
HiExprDict :: [(HiExpr, HiExpr)] -> HiExpr

-- | Evaluation errors (invalid arguments, ...)
data HiError
HiErrorInvalidArgument :: HiError
HiErrorInvalidFunction :: HiError
HiErrorArityMismatch :: HiError
HiErrorDivideByZero :: HiError

-- | Actions (read, write, random, ...)
data HiAction
HiActionRead :: FilePath -> HiAction
HiActionWrite :: FilePath -> ByteString -> HiAction
HiActionMkDir :: FilePath -> HiAction
HiActionChDir :: FilePath -> HiAction
HiActionCwd :: HiAction
HiActionNow :: HiAction
HiActionRand :: Int -> Int -> HiAction
HiActionEcho :: Text -> HiAction
class Monad m => HiMonad m
runAction :: HiMonad m => HiAction -> m HiValue
instance Codec.Serialise.Class.Serialise HW3.Base.HiFun
instance GHC.Generics.Generic HW3.Base.HiFun
instance GHC.Classes.Ord HW3.Base.HiFun
instance GHC.Classes.Eq HW3.Base.HiFun
instance GHC.Show.Show HW3.Base.HiFun
instance GHC.Classes.Eq HW3.Base.HiError
instance GHC.Show.Show HW3.Base.HiError
instance Codec.Serialise.Class.Serialise HW3.Base.HiAction
instance GHC.Generics.Generic HW3.Base.HiAction
instance GHC.Classes.Ord HW3.Base.HiAction
instance GHC.Classes.Eq HW3.Base.HiAction
instance GHC.Show.Show HW3.Base.HiAction
instance Codec.Serialise.Class.Serialise HW3.Base.HiValue
instance GHC.Generics.Generic HW3.Base.HiValue
instance GHC.Classes.Ord HW3.Base.HiValue
instance GHC.Classes.Eq HW3.Base.HiValue
instance GHC.Show.Show HW3.Base.HiValue
instance GHC.Classes.Eq HW3.Base.HiExpr
instance GHC.Show.Show HW3.Base.HiExpr

module HW3.Action

-- | Permissions for action execution.
data HiPermission

-- | Enables <a>read</a>, <tt>cd</tt>, <tt>cwd</tt> and <tt>echo</tt>
--   actions.
AllowRead :: HiPermission

-- | Enables <tt>write</tt> and <tt>mkdir</tt> actions.
AllowWrite :: HiPermission

-- | Enables <tt>now</tt> action.
AllowTime :: HiPermission

-- | Permissions exception.
data PermissionException
PermissionRequired :: HiPermission -> PermissionException

-- | Actions executor with some set of permissions.
newtype HIO a
HIO :: (Set HiPermission -> IO a) -> HIO a
[runHIO] :: HIO a -> Set HiPermission -> IO a

-- | Checks if desireable permission is owned, otherwise throws
--   <a>HiPermission</a>.
checkPermissions :: Set HiPermission -> HiPermission -> IO ()

-- | Action executer.
runWithPerms :: Set HiPermission -> HiAction -> IO HiValue
instance GHC.Classes.Ord HW3.Action.HiPermission
instance GHC.Show.Show HW3.Action.HiPermission
instance GHC.Classes.Eq HW3.Action.HiPermission
instance GHC.Show.Show HW3.Action.PermissionException
instance GHC.Classes.Eq HW3.Action.PermissionException
instance GHC.Base.Functor HW3.Action.HIO
instance GHC.Base.Applicative HW3.Action.HIO
instance GHC.Base.Monad HW3.Action.HIO
instance HW3.Base.HiMonad HW3.Action.HIO
instance GHC.Show.Show HW3.Action.PermissionException => GHC.Exception.Type.Exception HW3.Action.PermissionException
instance HW3.Base.HiMonad GHC.Types.IO

module HW3.BaseUtility

-- | List of pairs (<a>HiFun</a>, name of <a>HiFun</a> used in
--   interpreter).
funNames :: [(HiFun, String)]

-- | <a>Map</a> from <a>HiFun</a> to name used in interpreter.
funNamesMap :: Map HiFun String

module HW3.Evaluator
type HiErrorMonad m a = ExceptT HiError m a

-- | Helper function for evaluating binary functions.
bifunc :: HiMonad m => (HiValue -> HiValue -> HiErrorMonad m HiValue) -> [HiExpr] -> HiErrorMonad m HiValue

-- | Helper function for evaluating unary functions.
unaryfunc :: HiMonad m => (HiValue -> HiErrorMonad m HiValue) -> [HiExpr] -> HiErrorMonad m HiValue

-- | Helper function for lazy evaluating logical functions.
evalBiBoolFunction :: HiMonad m => Bool -> [HiExpr] -> HiErrorMonad m HiValue

-- | Helper function for evaluating comparing functions.
evalBiValFunction :: HiMonad m => (HiValue -> HiValue -> Bool) -> [HiExpr] -> HiErrorMonad m HiValue

-- | Extracts <a>Rational</a> from <a>HiValue</a>, if not presented throws
--   <a>HiErrorInvalidArgument</a>.
extractNumber :: HiMonad m => HiValue -> HiErrorMonad m Rational

-- | Extracts <a>Int</a> from <a>HiValue</a>, if not presented or not an
--   int throws <a>HiErrorInvalidArgument</a>.
extractInt :: HiMonad m => HiValue -> HiErrorMonad m Int

-- | Extracts <a>Text</a> from <a>HiValue</a>, if not presented throws
--   <a>HiErrorInvalidArgument</a>.
extractString :: HiMonad m => HiValue -> HiErrorMonad m Text

-- | Extracts <a>Seq</a> from <a>HiValue</a>, if not presented throws
--   <a>HiErrorInvalidArgument</a>.
extractList :: HiMonad m => HiValue -> HiErrorMonad m (Seq HiValue)

-- | Extracts <a>ByteString</a> from <a>HiValue</a>, if not presented
--   throws <a>HiErrorInvalidArgument</a>.
extractBytes :: HiMonad m => HiValue -> HiErrorMonad m ByteString

-- | Transforms <a>HiValue</a> to boolean.
toBool :: HiMonad m => HiValue -> HiErrorMonad m Bool

-- | Evaluates <a>HiFunAdd</a>.
evalAdd :: HiMonad m => [HiExpr] -> HiErrorMonad m HiValue

-- | Evaluates <a>HiFunSub</a>.
evalSub :: HiMonad m => [HiExpr] -> HiErrorMonad m HiValue

-- | Helper function to replicate container with custom replicator.
containerReplicate :: HiMonad m => (Int -> a -> a) -> a -> Rational -> HiErrorMonad m a

-- | Evaluates <a>HiFunMul</a>.
evalMul :: HiMonad m => [HiExpr] -> HiErrorMonad m HiValue

-- | Evaluates <a>HiFunDiv</a>.
evalDiv :: HiMonad m => [HiExpr] -> HiErrorMonad m HiValue

-- | Evaluates <a>HiFunNot</a>.
evalNot :: HiMonad m => [HiExpr] -> HiErrorMonad m HiValue

-- | Evaluates <a>HiFunIf</a>.
evalIf :: HiMonad m => [HiExpr] -> HiErrorMonad m HiValue

-- | Evaluates <a>HiFunLength</a>.
evalLength :: HiMonad m => [HiExpr] -> HiErrorMonad m HiValue

-- | Evaluates <a>HiFunToUpper</a>.
evalToUpper :: HiMonad m => [HiExpr] -> HiErrorMonad m HiValue

-- | Evaluates <a>HiFunToLower</a>.
evalToLower :: HiMonad m => [HiExpr] -> HiErrorMonad m HiValue

-- | Evaluates <a>HiFunReverse</a>.
evalReverse :: HiMonad m => [HiExpr] -> HiErrorMonad m HiValue

-- | Evaluates <a>HiFunTrim</a>.
evalTrim :: HiMonad m => [HiExpr] -> HiErrorMonad m HiValue

-- | Fits value $x$ to range $[low, high]$.
limitToRange :: Int -> Int -> Int

-- | Evaluates index for slicing.
evalIndex :: HiMonad m => Int -> HiValue -> Bool -> HiErrorMonad m Int

-- | Evaluates indexing.
evalIndexing :: HiMonad m => HiValue -> Rational -> HiErrorMonad m HiValue

-- | Evaluates splicing.
evalSplice :: HiMonad m => HiValue -> HiValue -> HiValue -> HiErrorMonad m HiValue

-- | Evaluates <a>HiFunList</a>.
evalList :: HiMonad m => [HiExpr] -> HiErrorMonad m (Seq HiValue)

-- | Evaluates <a>HiFunRange</a>.
evalRange :: HiMonad m => [HiExpr] -> HiErrorMonad m HiValue

-- | Evaluates <a>HiFunFold</a>.
evalFold :: HiMonad m => [HiExpr] -> HiErrorMonad m HiValue

-- | Evaluates <a>HiFunPackBytes</a>.
evalPackBytes :: HiMonad m => [HiExpr] -> HiErrorMonad m HiValue

-- | Helper function for evaluating unary <a>ByteString</a> functions.
evalUnaryBytes :: HiMonad m => (ByteString -> HiErrorMonad m HiValue) -> [HiExpr] -> HiErrorMonad m HiValue

-- | Evaluates <a>HiFunUnpackBytes</a>.
evalUnpackBytes :: HiMonad m => [HiExpr] -> HiErrorMonad m HiValue

-- | Evaluates <a>HiFunEncodeUtf8</a>.
evalEncodeUtf8 :: HiMonad m => [HiExpr] -> HiErrorMonad m HiValue

-- | Evaluates <a>HiFunDecodeUtf8</a>.
evalDecodeUtf8 :: HiMonad m => [HiExpr] -> HiErrorMonad m HiValue

-- | Evaluates <a>HiFunZip</a>.
evalZip :: HiMonad m => [HiExpr] -> HiErrorMonad m HiValue

-- | Evaluates <a>HiFunUnzip</a>.
evalUnzip :: HiMonad m => [HiExpr] -> HiErrorMonad m HiValue

-- | Evaluates <a>HiFunSerialise</a>.
evalSerialise :: HiMonad m => [HiExpr] -> HiErrorMonad m HiValue

-- | Evaluates <a>HiFunDeserialise</a>.
evalDeserialise :: HiMonad m => [HiExpr] -> HiErrorMonad m HiValue

-- | Evaluates <a>HiFunRead</a>.
evalRead :: HiMonad m => [HiExpr] -> HiErrorMonad m HiValue

-- | Evaluates <a>HiFunWrite</a>.
evalWrite :: HiMonad m => [HiExpr] -> HiErrorMonad m HiValue

-- | Evaluates <a>HiFunMkDir</a>.
evalMkDir :: HiMonad m => [HiExpr] -> HiErrorMonad m HiValue

-- | Evaluates <a>HiFunChDir</a>.
evalChDir :: HiMonad m => [HiExpr] -> HiErrorMonad m HiValue

-- | Evaluates <a>HiFunParseTime</a>.
evalParseTime :: HiMonad m => [HiExpr] -> HiErrorMonad m HiValue

-- | Evaluates <a>HiFunRand</a>.
evalRand :: HiMonad m => [HiExpr] -> HiErrorMonad m HiValue

-- | Evaluates <a>HiFunEcho</a>.
evalEcho :: HiMonad m => [HiExpr] -> HiErrorMonad m HiValue

-- | Helper function for map construction.
mapTransformer :: (a -> a -> a) -> [(HiValue, a)] -> (a -> HiValue) -> HiValue

-- | Helper functino for counting container values.
containerCount :: [HiValue] -> HiValue

-- | Evaluates <a>HiFunCount</a>.
evalCount :: HiMonad m => [HiExpr] -> HiErrorMonad m HiValue

-- | Evaluates <a>HiFunKeys</a>.
evalKeys :: HiMonad m => [HiExpr] -> HiErrorMonad m HiValue

-- | Evaluates <a>HiFunValues</a>.
evalValues :: HiMonad m => [HiExpr] -> HiErrorMonad m HiValue

-- | Evaluates <a>HiFunInvert</a>.
evalInvert :: HiMonad m => [HiExpr] -> HiErrorMonad m HiValue

-- | Evaluates <a>HiExpr</a> with <a>HiError</a> exception.
evalExcept :: HiMonad m => HiExpr -> ExceptT HiError m HiValue

-- | Evaluates <a>HiExpr</a> to a <a>HiValue</a> or <a>HiError</a>
eval :: HiMonad m => HiExpr -> m (Either HiError HiValue)


-- | Contex free grammar for non-operator parser:
--   
--   <pre>
--   expr -&gt; (value | '(' expr ')' | dict ) args* '<tt>!</tt>'*
--   value -&gt; HiValue
--   dict -&gt; '{' (eps | dictEntry (',' dictEntry)*) '}'
--   dictEntry -&gt; expr '<tt>:</tt>' expr
--   args -&gt; '(' (eps | exprWithOperators (',' exprWithOperators)*) ')'
--   </pre>
module HW3.Parser
type HiListParsec a = Parsec Void String [a]
type HiValueParsec = Parsec Void String HiValue
type HiParsec a = Parsec Void String a
type HiActionParsec = Parsec Void String HiAction

-- | Parse zero or more spaces.
parseSpaces :: Parsec Void String ()

-- | Parse string skipping leading and trailing spaces.
string :: String -> Parsec Void String String

-- | Parse sequence of values.
parseSequence :: Show e => Parsec Void String a -> Parsec Void String b -> HiParsec e -> HiParsec e -> HiListParsec e

-- | Parse identifier.
parseIdentifier :: Parsec Void String HiExpr

-- | Parse arguments in one of the forms:
parseArgs :: Parsec Void String [HiExpr]

-- | Parse string with associated <a>HiFun</a>.
parseFunName :: String -> HiFun -> HiValueParsec

-- | Parse string with associated <a>HiAction</a>.
parseFunActionName :: String -> HiAction -> HiValueParsec

-- | Parse <a>HiValueNumber</a>.
parseNum :: HiValueParsec

-- | Parse <a>HiValueBool</a>.
parseBool :: HiValueParsec

-- | Parse <a>HiValueString</a> in quotes.
parseString :: HiValueParsec

-- | Parse <a>HiValueNull</a>.
parseNull :: HiValueParsec

-- | Parse list of values.
parseList :: HiParsec HiExpr

-- | Parse <a>ByteString</a> represented as a sequence of hex numbers.
parseByteString :: HiValueParsec

-- | Parse dictionary entry.
parseDictEntry :: Parsec Void String (HiExpr, HiExpr)

-- | Parse <a>HiExprDict</a>.
parseDict :: HiParsec HiExpr

-- | All possible <a>HiValue</a> tokens.
valueTokens :: [HiValueParsec]

-- | Parse <a>HiExpr</a>.
parseExpr :: Parsec Void String HiExpr

-- | Operators ordered by priority.
table :: [[Operator (Parsec Void String) HiExpr]]
binaryR :: String -> HiFun -> Operator (Parsec Void String) HiExpr
binaryL :: String -> HiFun -> Operator (Parsec Void String) HiExpr
binaryN :: String -> HiFun -> Operator (Parsec Void String) HiExpr
parseExprWithOperators :: Parsec Void String HiExpr

-- | Run parser.
parse :: String -> Either (ParseErrorBundle String Void) HiExpr

module HW3.Pretty

-- | Prettifies <tt>q</tt> + <tt>r</tt> / <tt>den</tt> ratio.
prettyMixedFraction :: Integer -> Integer -> Integer -> Doc AnsiStyle

-- | Prettifies <a>ByteString</a>.
prettyByteString :: ByteString -> Doc AnsiStyle

-- | Prettifies <a>HiValue</a>.
prettyValue :: HiValue -> Doc AnsiStyle
